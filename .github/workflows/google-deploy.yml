name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: cibertec-project-24
  SERVICE: qali-warma-ms

  GAR_LOCATION: southamerica-west1
  GAR_NAME: qali-warma
  REGION: southamerica-west1
  IMAGE_NAME: qali-warma-ms

jobs:
  build-and-push:
    permissions:
      actions: write
      contents: read

    name: Build and Push Container
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.commit-short-sha.outputs.short_sha }}
      prod-image: ${{ steps.prod-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Commit Short SHA
        id: commit-short-sha
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Authenticate Docker to Google Cloud Artifact Registry
      # Se tiene que configurar una service account en GCP y generar su key en formato json y agregar en los env de github el contenido del archivo JSON
      - name: Docker Auth in Production
        uses: 'docker/login-action@v3'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: '_json_key'
          password: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Build and Push Container to Production
        id: prod-image
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit-short-sha.outputs.short_sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit-short-sha.outputs.short_sha }}"
          echo "image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.commit-short-sha.outputs.short_sha }}" >> $GITHUB_OUTPUT

  deploy-to-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Deploy to Cloud Run (Dev)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ needs.build-and-push.outputs.prod-image }}

      - name: URL Base Path Cloud Run
        run: echo ${{ steps.deploy.outputs.url }}